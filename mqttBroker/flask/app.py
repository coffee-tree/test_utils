from flask import Flask, request, jsonify, render_template
import threading
import paho.mqtt.client as mqtt
import json
import time
import random
import itertools

app = Flask(__name__)


@app.route("/")
def index():
    return render_template(
        "index.html",
        status_3DF92_192=status_dict["3DF92-192"],
        status_4HHC2_392=status_dict["4HHC2-392"],
    )


# MQTT 설정
mqtt_broker = "localhost"
mqtt_port = 1883
mqtt_topic = "coffee"

# 위치 정보
pos = [
    [37.5521, 127.0728],
    [37.552060000000004, 127.07284666666666],
    [37.55202, 127.07289333333334],
    [37.55198, 127.07294],
    [37.55194, 127.07298666666667],
    [37.5519, 127.07303333333333],
    [37.55186, 127.07308],
    [37.55182, 127.07312666666667],
    [37.55178, 127.07317333333333],
    [37.55174, 127.07321999999999],
    [37.5517, 127.07326666666667],
    [37.55166, 127.07331333333333],
    [37.55162, 127.07336],
    [37.55158, 127.07340666666666],
    [37.551539999999996, 127.07345333333333],
    [37.5515, 127.0735],
    [37.55144, 127.07356666666666],
    [37.551379999999995, 127.07363333333333],
    [37.55132, 127.0737],
    [37.55126, 127.07376666666666],
    [37.5512, 127.07383333333333],
    [37.55114, 127.0739],
    [37.55108, 127.07396666666666],
    [37.55102, 127.07403333333333],
    [37.55096, 127.0741],
    [37.5509, 127.07416666666667],
    [37.55084, 127.07423333333334],
    [37.55078, 127.0743],
    [37.550720000000005, 127.07436666666666],
    [37.55066, 127.07443333333333],
    [37.5506, 127.0745],
    [37.55060666666667, 127.07456],
    [37.55061333333334, 127.07462],
    [37.55062, 127.07468],
    [37.550626666666666, 127.07474],
    [37.55063333333334, 127.0748],
    [37.55064, 127.07486],
    [37.550646666666665, 127.07492],
    [37.55065333333334, 127.07498],
    [37.55066, 127.07504],
    [37.550666666666665, 127.0751],
    [37.550673333333336, 127.07516],
    [37.55068, 127.07522],
    [37.550686666666664, 127.07528],
    [37.550693333333335, 127.07534],
    [37.5507, 127.0754],
    [37.550693333333335, 127.07534],
    [37.550686666666664, 127.07528],
    [37.55068, 127.07522],
    [37.550673333333336, 127.07516],
    [37.550666666666665, 127.0751],
    [37.55066, 127.07504],
    [37.55065333333334, 127.07498],
    [37.550646666666665, 127.07492],
    [37.55064, 127.07486],
    [37.55063333333334, 127.0748],
    [37.550626666666666, 127.07474],
    [37.55062, 127.07468],
    [37.55061333333334, 127.07462],
    [37.55060666666667, 127.07456],
    [37.5506, 127.0745],
    [37.550560000000004, 127.07446666666667],
    [37.55052, 127.07443333333333],
    [37.55048, 127.0744],
    [37.55044, 127.07436666666666],
    [37.5504, 127.07433333333333],
    [37.55036, 127.0743],
    [37.55032, 127.07426666666666],
    [37.55028, 127.07423333333334],
    [37.55024, 127.0742],
    [37.5502, 127.07416666666667],
    [37.55016, 127.07413333333334],
    [37.55012, 127.0741],
    [37.55008, 127.07406666666667],
    [37.550039999999996, 127.07403333333333],
    [37.55, 127.074],
    [37.54995333333333, 127.07402666666667],
    [37.549906666666665, 127.07405333333332],
    [37.549859999999995, 127.07408],
    [37.54981333333333, 127.07410666666667],
    [37.54976666666666, 127.07413333333334],
    [37.54972, 127.07415999999999],
    [37.54967333333333, 127.07418666666666],
    [37.54962666666667, 127.07421333333333],
    [37.54958, 127.07424],
    [37.549533333333336, 127.07426666666666],
    [37.54948666666667, 127.07429333333333],
    [37.549440000000004, 127.07432],
    [37.549393333333335, 127.07434666666667],
    [37.54934666666667, 127.07437333333333],
    [37.5493, 127.0744],
    [37.54934666666667, 127.07437333333333],
    [37.549393333333335, 127.07434666666667],
    [37.549440000000004, 127.07432],
    [37.54948666666667, 127.07429333333333],
    [37.549533333333336, 127.07426666666666],
    [37.54958, 127.07424],
    [37.54962666666667, 127.07421333333333],
    [37.54967333333333, 127.07418666666666],
    [37.54972, 127.07415999999999],
    [37.54976666666666, 127.07413333333334],
    [37.54981333333333, 127.07410666666667],
    [37.549859999999995, 127.07408],
    [37.549906666666665, 127.07405333333332],
    [37.54995333333333, 127.07402666666667],
    [37.55, 127.074],
    [37.550039999999996, 127.07403333333333],
    [37.55008, 127.07406666666667],
    [37.55012, 127.0741],
    [37.55016, 127.07413333333334],
    [37.5502, 127.07416666666667],
    [37.55024, 127.0742],
    [37.55028, 127.07423333333334],
    [37.55032, 127.07426666666666],
    [37.55036, 127.0743],
    [37.5504, 127.07433333333333],
    [37.55044, 127.07436666666666],
    [37.55048, 127.0744],
    [37.55052, 127.07443333333333],
    [37.550560000000004, 127.07446666666667],
    [37.5506, 127.0745],
    [37.55063333333334, 127.07446666666667],
    [37.55066666666667, 127.07443333333333],
    [37.5507, 127.0744],
    [37.55073333333333, 127.07436666666666],
    [37.55076666666667, 127.07433333333333],
    [37.5508, 127.0743],
    [37.55083333333334, 127.07426666666666],
    [37.550866666666664, 127.07423333333334],
    [37.5509, 127.0742],
    [37.55093333333333, 127.07416666666667],
    [37.55096666666667, 127.07413333333334],
    [37.551, 127.0741],
    [37.55103333333333, 127.07406666666667],
    [37.551066666666664, 127.07403333333333],
    [37.5511, 127.074],
    [37.55114666666667, 127.07394],
    [37.55119333333333, 127.07388],
    [37.55124, 127.07382],
    [37.55128666666666, 127.07376],
    [37.55133333333333, 127.0737],
    [37.55138, 127.07364],
    [37.551426666666664, 127.07357999999999],
    [37.551473333333334, 127.07352],
    [37.55152, 127.07346],
    [37.551566666666666, 127.07339999999999],
    [37.551613333333336, 127.07334],
    [37.55166, 127.07328],
    [37.55170666666667, 127.07321999999999],
    [37.55175333333333, 127.07316],
    [37.5518, 127.0731],
    [37.55182, 127.07307999999999],
    [37.55184, 127.07306],
    [37.55186, 127.07303999999999],
    [37.551880000000004, 127.07302],
    [37.5519, 127.073],
    [37.55192, 127.07298],
    [37.55194, 127.07296],
    [37.55196, 127.07294],
    [37.55198, 127.07292],
    [37.552, 127.0729],
    [37.55202, 127.07288],
    [37.552040000000005, 127.07286],
    [37.552060000000004, 127.07284],
    [37.552080000000004, 127.07282000000001],
    [37.5521, 127.0728],
]

# 초기 상태 딕셔너리
status_dict = {"3DF92-192": "Active", "4HHC2-392": "Active"}

last_status_dict = {"3DF92-192": "Active", "4HHC2-392": "Active"}


# MQTT 프로듀서 함수
def mqtt_producer(device_id):
    producer_client = mqtt.Client()
    producer_client.connect(mqtt_broker, mqtt_port, 60)

    pos_index = 0  # 위치 인덱스
    while True:
        current_status = status_dict[device_id]
        last_status = last_status_dict[device_id]

        # 상태가 Inactive로 변경되면 위치 데이터 한 번 퍼블리싱
        if current_status == "Inactive" and last_status == "Active":
            x, y = pos[pos_index]
            data = {"id": device_id, "x": x, "y": y, "status": current_status}
            message = json.dumps(data)
            producer_client.publish(mqtt_topic, message.encode("utf-8"))

        # 상태가 Active일 때만 지속적으로 데이터 퍼블리싱
        if current_status == "Active":
            x, y = pos[pos_index]
            data = {"id": device_id, "x": x, "y": y, "status": current_status}
            message = json.dumps(data)
            producer_client.publish(mqtt_topic, message.encode("utf-8"))
            pos_index = (pos_index + 1) % len(pos)

            sleep_time = random.randint(1, 2)
            time.sleep(sleep_time)
        else:
            time.sleep(1)  # Inactive 상태일 경우 단순히 대기

        # 마지막 상태 업데이트
        last_status_dict[device_id] = current_status


# POST /status/<device_id> 엔드포인트
@app.route("/status/<device_id>", methods=["POST"])
def update_status(device_id):
    data = request.get_json()
    if "status" in data and data["status"] in ["Active", "Inactive"]:
        status_dict[device_id] = data["status"]
        return (
            jsonify({"message": f"Status of {device_id} updated to {data['status']}"}),
            200,
        )
    else:
        return jsonify({"message": "Invalid status"}), 400


# 두 개의 디바이스에 대한 프로듀서 스레드 실행
producer_thread1 = threading.Thread(target=mqtt_producer, args=("3DF92-192",))
producer_thread2 = threading.Thread(target=mqtt_producer, args=("4HHC2-392",))
producer_thread1.start()
producer_thread2.start()

# Flask 애플리케이션 실행
if __name__ == "__main__":
    app.run(debug=False)
